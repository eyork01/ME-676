## Inverse Kinematics Robotic Solver 
## Author: Ricardo Gutierrez, Madison Vogt, Ethan York

Julia is required to run this folder, the minimum package requirements include RigidBodyDynamics, LinearAlgebra, StaticArrays, RigidBodySim, MeshCat, MeshCatMechanisms, Gadfly, Cairo, and Fontconfig. The files in this folder require environments contained in the ode folder to run correctly, run the files while in the odes folder inside Julia REPL. 

The entire folder must be downloaded to run the project by the command include("project1.jl"). After running the command, the user must input the desired X, Y, and Z coordinates of the endeffector of the robot in the terminal, then navigate to the visualizer to watch the animation of the robot moving from the current endeffector position to the desired input. A short list of the suggested (X, Y, Z) end effector positions for testing include (-1, 2, 1), (1, -1, 0) and (-1.5, 1.5, 1.5).

## File Descriptions

The initial state of the robot is defined by the creation of "project1Robot.urdf" where each link is described with revolute joints connecting them. A 'continuous' joint constraint is used for all links except the endeffectors, which are constrained with a 'fixed' constraint. 

The 'project1_functions.jl' file creates the required functions to construct the 'project1.jl' solution. The function 'update_planar_state()'is defined to update the planar robot's configuration in the visualizer, with the necessary arguments of 'state', 'mvis', and 'q'. The 'request_input()' command is used to create the user input function that prompts the user to input x, y, and z coordinates in the terminal. The 'calcXinW()' function is used to perform the required transformations to yield the endeffector position in the world frame using forward kinematics, the result of the function will be used to verify the position found using inverse kinematics. The robot mechanism is loaded into the file from the urdf through the command 'display_urdf'and the state of the robot is defined with the command 'MechanismState'. The endeffector body, frame, and point configurations are defined in relation to the base frame using 'findbody' and 'default_frame'.

The main code 'project1.jl' utilizes the 'for' function to create the main loop for solving the ode, including calculating the Jacobian using the 'point_jacobian' function. The psuedoinverse of the calculated Jacobian is found using the function 'pinv()', where the change in joint angle, dq, is found and added to the current joint angle magnitude. The 'for' loop runs for either 100 iterations or until the difference between the desired position of the endeffector, desiredX, and the current position of the endeffector, currentX, is less than the acceptable error. The visualizer updates after each iteration, ultimately settling on the desiredX. 

